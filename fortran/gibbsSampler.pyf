!    -*- f90 -*-
! Note: the context of this file is case sensitive.

python module gibbsSampler ! in 
    interface  ! in :gibbsSampler
        module gibbs_sampler ! in :gibbsSampler:gibbsSampler.f95
            subroutine gibbssampler(matrix,nzw,nzm,nz,nm,ntopics,max_iter,m,n,p_z,topics,topics2,alpha,beta) ! in :gibbsSampler:gibbsSampler.f95:gibbs_sampler
                integer dimension(n,m) :: matrix
                integer dimension(n,ntopics),depend(n) :: nzw
                integer dimension(ntopics,m),depend(ntopics,m) :: nzm
                integer dimension(ntopics),depend(ntopics) :: nz
                integer dimension(m),depend(m) :: nm
                integer, optional,intent(in),check(shape(nzw,1)==ntopics),depend(nzw) :: ntopics=shape(nzw,1)
                integer intent(in) :: max_iter
                integer, optional,check(shape(matrix,1)==m),depend(matrix) :: m=shape(matrix,1)
                integer, optional,check(shape(matrix,0)==n),depend(matrix) :: n=shape(matrix,0)
                real dimension(ntopics),depend(ntopics) :: p_z
                integer dimension(n,m),depend(n,m) :: topics
                integer dimension(n,m),depend(n,m) :: topics2
                real intent(in) :: alpha
                real intent(in) :: beta
            end subroutine gibbssampler
            subroutine loglikelihood(matrix,nzw,nzm,alpha,beta,ntopics,n,m,lik,max_iter,i,j) ! in :gibbsSampler:gibbsSampler.f95:gibbs_sampler
                integer dimension(n,m),intent(in) :: matrix
                integer dimension(n,ntopics),intent(in),depend(n) :: nzw
                integer dimension(ntopics,m),intent(in),depend(ntopics,m) :: nzm
                real intent(in) :: alpha
                real intent(in) :: beta
                integer, optional,intent(in),check(shape(nzw,1)==ntopics),depend(nzw) :: ntopics=shape(nzw,1)
                integer, optional,intent(in),check(shape(matrix,0)==n),depend(matrix) :: n=shape(matrix,0)
                integer, optional,intent(in),check(shape(matrix,1)==m),depend(matrix) :: m=shape(matrix,1)
                real dimension(max_iter),intent(inout) :: lik
                integer, optional,intent(in),check(len(lik)>=max_iter),depend(lik) :: max_iter=len(lik)
                integer intent(in) :: i
                integer intent(in) :: j
            end subroutine loglikelihood
            subroutine log_multinomial_beta(alpha,k,lik,ntopics,max_iter,i) ! in :gibbsSampler:gibbsSampler.f95:gibbs_sampler
                real dimension(ntopics),intent(in) :: alpha
                integer intent(in) :: k
                real dimension(max_iter),intent(inout) :: lik
                integer, optional,intent(in),check(len(alpha)>=ntopics),depend(alpha) :: ntopics=len(alpha)
                integer, optional,intent(in),check(len(lik)>=max_iter),depend(lik) :: max_iter=len(lik)
                integer intent(in) :: i
            end subroutine log_multinomial_beta
            subroutine conditional_distribution(matrix,nzw,nzm,nz,beta,alpha,ntopics,m,n,p_z,j,ll) ! in :gibbsSampler:gibbsSampler.f95:gibbs_sampler
                integer dimension(n,m),intent(in) :: matrix
                integer dimension(n,ntopics),intent(in),depend(n) :: nzw
                integer dimension(ntopics,m),intent(in),depend(ntopics,m) :: nzm
                integer dimension(ntopics),intent(in),depend(ntopics) :: nz
                real intent(in) :: beta
                real intent(in) :: alpha
                integer, optional,intent(in),check(shape(nzw,1)==ntopics),depend(nzw) :: ntopics=shape(nzw,1)
                integer, optional,intent(in),check(shape(matrix,1)==m),depend(matrix) :: m=shape(matrix,1)
                integer, optional,intent(in),check(shape(matrix,0)==n),depend(matrix) :: n=shape(matrix,0)
                real dimension(ntopics),intent(inout),depend(ntopics) :: p_z
                integer intent(in) :: j
                integer intent(in) :: ll
            end subroutine conditional_distribution
        end module gibbs_sampler
    end interface 
end python module gibbsSampler

! This file was auto-generated with f2py (version:2).
! See http://cens.ioc.ee/projects/f2py2e/
